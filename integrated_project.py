# -*- coding: utf-8 -*-
"""Integrated-project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nVXqSsJcdac8JtycUNEPaDPJNu-zuVsB
"""

!pip install openai pandas

import pandas as pd
import sqlite3
from openai import OpenAI
import json
import re

class DataQuerySystem:
    def __init__(self, csv_file_path, database_path='data.db'):
        """
        Initialize the query system with database connection and OpenAI client
        """
        self.database_path = database_path
        self.client = OpenAI(
            base_url='https://expert-eft-innocent.ngrok-free.app/v1',
            api_key='na'
        )

        # Set up database
        self.setup_database(csv_file_path)

    def setup_database(self, csv_file_path):
        """
        Set up SQLite database from CSV file
        """
        df = pd.read_csv(csv_file_path)
        self.connection = sqlite3.connect(self.database_path)
        df.to_sql('patients', self.connection, if_exists='replace', index=False)

    def analyze_prompt(self, user_query):
        """
        Determine if the query requires plot, string, or dataframe output
        """
        prompt = f"""You are a data analysis expert. Analyze the following user query and determine what type of output would be most appropriate.

        User Query: {user_query}

        Guidelines:
        - If the user is asking about a single record or piece of information, respond with 'string'
        - If the user is asking about multiple records or needs tabular data, respond with 'dataframe'
        - If the user is requesting any kind of visualization or comparison, respond with 'plot'

        Please respond in the following JSON format:
        {{
            "output_type": "string|dataframe|plot",
            "explanation": "Brief explanation of why this output type was chosen"
        }}
        """

        response = self.client.chat.completions.create(
            model="qwen2.5-coder-7b-instruct",
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )

        try:
            return json.loads(response.choices[0].message.content)
        except json.JSONDecodeError:
            return {
                "output_type": "string",
                "explanation": "Failed to parse response, defaulting to string output"
            }

    def generate_sql_query(self, question):
        """
        Generate SQL query using the AI model
        """
        prompt = f"""You are an expert SQL developer. Generate a SQL query to answer the following question.
        The database contains a table named 'patients' with healthcare data.
        Question: {question}
        Return only the SQL query without any explanations or markdown.
        """

        response = self.client.chat.completions.create(
            model="qwen2.5-coder-7b-instruct",
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )

        query = response.choices[0].message.content.strip()
        query = re.sub(r'^```sql\n|\n```$', '', query)
        return query

    def execute_query(self, query):
        """
        Execute SQL query and return results
        """
        return pd.read_sql_query(query, self.connection)

    def format_result(self, result, output_type):
        """
        Format the result based on output type
        """
        if output_type == 'string':
            # For single record/value, convert to string
            if len(result) == 1 and len(result.columns) == 1:
                return str(result.iloc[0, 0])
            return result.to_string()
        else:
            # Return DataFrame for multiple records
            return result

    def process_query(self, user_query):
        """
        Main function to process user queries
        """
        try:
            # First, analyze the query type
            analysis = self.analyze_prompt(user_query)
            output_type = analysis['output_type']

            # If it's a plot request, return early
            if output_type == 'plot':
                return {
                    'type': 'plot',
                    'message': 'Plot request detected. Please handle with visualization logic.',
                    'query': user_query
                }

            # Generate and execute SQL query
            sql_query = self.generate_sql_query(user_query)
            result = self.execute_query(sql_query)

            # Format result based on output type
            formatted_result = self.format_result(result, output_type)

            return {
                'type': output_type,
                'result': formatted_result,
                'sql_query': sql_query
            }

        except Exception as e:
            return {
                'type': 'error',
                'message': f"Error processing query: {str(e)}"
            }

    def close(self):
        """
        Close database connection
        """
        self.connection.close()

# Example usage
def main():
    # Initialize the system
    csv_file_path = '/content/Healthcare_dataset_with_summary.csv'
    query_system = DataQuerySystem(csv_file_path)

    try:
        # Test queries
        test_queries = [
            "What is the average billing amount for patients admitted in emergency?",
            "List all patient names with Medical Condition Asthma",
            "Create a bar chart showing age distribution of patients"
        ]

        for query in test_queries:
            print(f"\nProcessing query: {query}")
            result = query_system.process_query(query)
            print(f"Result type: {result['type']}")
            if 'result' in result:
                print("Result:")
                print(result['result'])
            elif 'message' in result:
                print("Message:", result['message'])

    finally:
        query_system.close()

if __name__ == "__main__":
    main()